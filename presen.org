#+title: Exploration Among and Within Plateaus in Greedy Best-First Search
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg
#+LINK: spng file:img/static/%s.png
#+LINK: sjpg file:img/static/%s.jpg
#+LINK: sgif file:img/static/%s.gif

#+begin_outline-text-1
#+begin_center
#+begin_larger
_Masataro Asai_, Alex Fukunaga, The University of Tokyo
#+end_larger
#+end_center

20min

#+begin_note
#+begin_alignright
Made by guicho2.71828 (Masataro Asai)
#+end_alignright
#+end_note
#+end_outline-text-1

* Summary: Analyse *Diversification in Greedy Best First Search* and propose a new method

+ Diversification = Exploration = unbiasing the search

+ New method highlight: *First effective Fractal-based algorithm ever!*

* Search Diversification

[[png:diversify/1]]

** Search Diversification
[[png:diversify/2]]

** Search Diversification
[[png:diversify/3]]

** Search Diversification
[[png:diversify/4]]

** Search Diversification
[[png:diversify/5]]

** Search Diversification

[[png:diversify/final]]

#+begin_alignright
An art of How *NOT* to trust the heuristic function and still perform effectively?
#+end_alignright

* Preliminaries

+ Search algorithm sorting strategy [S_1, S_2 ..., ＊] ::
     the sorting key for OPEN list (lexcographical order)
+ Default strategy =＊= ::
     FIFO (queue), LIFO (stack) or Random; Exists for every OPEN-list
+ Plateau :: Nodes that are tied with =＊=
+ Type-based bucket <T_1, T_2 ...> (Xie14) ::
     Random selection from buckets with key values e.g. $\langle g,h\rangle$
+ Alternation Queue alt(Q1,Q2...) (Roger AAAI10) ::
     Alternates several OPEN lists

* Background

There are a bunch of *search diversification* approaches

+ Diverse BFS (Imai, AAAI11) (Much more complicated)
+ Monte-Carlo Random Walk (MRW) --- Sometimes runs a random walk
+ Epsilon-greedy GBFS --- *alt* ([h,*], [Random]) --- Sometimes runs a random search
+ Type-based GBFS --- *alt* ([h,*], <g,h>) --- Sometimes runs a depth-balanced search
+ GBFS-LE (local expansion) --- Runs a randomized search when local minima is detected
  + GBFS-LS (local search), GBFS-MRW

#+begin_larger
#+begin_center
+ *We need a /cleaner, less ad-hoc/ way*

  *to understand their behavior.*
#+end_center
#+end_larger

* Traditional Understanding : Heuristic Error

\[
   \text{Error} = |h - h^*|
\]

#+begin_center
$h$ : heuristic value, $h^*$ : perfect heuristic

$h>h^*$ : Overestimation, $h<h^*$ : Underestimation
#+end_center

#+begin_center
#+begin_larger
+ Is this view sufficient?
#+end_larger
#+end_center

** Heuristic Error

[[png:plateau/1]]

#+begin_resume
This is a plot of the number of the nodes against heuristic value an the perfect heuristic value,
under a hypothetical heuristic function.
#+end_resume

** Heuristic Error

[[png:plateau/2]]

#+begin_resume
As you can see, the nodes that are behind the peak of this plot is the nodes that are underestimated,
and those that are in front of the peak is those which are overestimated.
We assume inadmissible heuristics.
#+end_resume

** Heuristic Error is */2-dimensional/*

[[png:plateau/3]]

#+begin_resume
however, if we look at the slice of this plot at the x-axis and the y-axis, you
would notice that this view is too simplistic. The errors between the heuristic
value and the perfect heuristic is actually distributed along two
orthogonal axes.
#+end_resume

** Inter-plateau error

[[png:plateau/4]]

#+begin_resume
We gave them the separate names: The first one, along heuristic axis, is called inter-plateau error.
#+end_resume


** Intra-plateau error

[[png:plateau/5]]

#+begin_resume
And the error along the h* axis is called intra-plateau error.
Since these errors are in the orthogonal axes, they should be treated separately.
#+end_resume

** Inter-plateau error & diversification

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[png:plateau/4]]
#+end_span6
#+begin_span6
+ *The smallest $h^*$ may have high $h$* (inter-plateau error)
+ *Selecting the minimum $h$ is not always good*
+ *Diversifies the next $h$ to expand*
+ DBFS, Type-GBFS, $\epsilon$-greedy
#+end_span6
#+end_row-fluid
#+end_container-fluid

#+begin_resume
In particular, inte-plateau error should be treated by inter-plateau diversification.
It is a method whose intuition is as follows:
#+end_resume

** Intra-plateau error & diversification

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[png:plateau/6]]
#+end_span6
#+begin_span6
+ *The smallest $h$  may have high $h^*$* (intra-plateau error)
+ *Deterministic Tiebreaking (e.g. FIFO/LIFO) may keep expanding high-$h^*$*
+ *Randomize the search within h-plateau* so that we (hopefully) *expand a low $h^*$ node*
#+end_span6
#+end_row-fluid
#+end_container-fluid

GBFS-LE has mixed effect; Local expansion is unrestricted

** Let's show!

+ IPC11, IPC14 (duplicated domains are excluded), 5min, 4GB

+ *Important: Use the same diversification method* for inter-vs-intra

+ The cloest we can find: *Type-GBFS* (inter) vs *RandomDepth Tiebreaking* (intra)

  + Intra-plateau diversification == randomized tie breaking

  + Type GBFS --- *Randomize <g,h>*

  + RandomDepth --- *Randomize <d> within plateau*

    + d ≡ number of steps from the nearest ancestor w/ the same h

  + *g, h, d are all depth-related metrics*

** Intra-vs-Inter are orthogonal & complementary

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[png:icaps17-results]]
#+end_span6
#+begin_span6
+ hd (RandomDepth Tiebreaking) :: Randomize <d> in plateau
+ hD (Type GBFS) :: Randomize <g,h>
+ hdD :: */RandomDepth + Type GBFS/*

Results:

+ Different domains require different diversification
+ *With both modes enabled, /effects combine/*
+ _/Take-home message: Whenever you have a diversification method, use it for both modes!/_
#+end_span6
#+end_row-fluid
#+end_container-fluid

* What's next?

#+begin_quote
Type GBFS: *Randomize <g,h>*

RandomDepth: *Randomize <d> within plateau*

　d ≡ number of steps from the nearest ancestor w/ the same h

*g, h, d are all depth-related metrics*
#+end_quote

#+begin_xlarge
#+begin_center
+ Let's diversify the width!
#+end_center
#+end_xlarge

* Pathological case for all diversification methods

[[png:model/original]]

** FIFO (Breadth-first)
[[png:model/fifo1]]
** FIFO (Breadth-first)
[[png:model/fifo2]]
** FIFO (Breadth-first)
[[png:model/fifo3]]
** LIFO (Depth-first)
[[png:model/lifo1]]
** LIFO (Depth-first)
[[png:model/lifo2]]
** LIFO (Depth-first)
[[png:model/lifo3]]
** Random
[[png:model/ro1]]
** Random
[[png:model/ro2]]
** Random-Depth
[[png:model/rd1]]
** Random-Depth
[[png:model/rd2]]

* Bond Invasion Percolation (1983)

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[spng:ip]]
#+end_span6
#+begin_span6
#+begin_larger
+ A well-known *fractal structure*
+ Distribution of fluid slowly invading a porous media
+ e.g., water replacing the oil in a porous rock
+ Application: oil reservoir mining
#+end_larger
#+end_span6
#+end_row-fluid
#+end_container-fluid

** Physics people use the different term


#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[sgif:site-bond]]
#+end_span6
#+begin_span6
#+begin_larger
Bond == Edge

Site == Node
#+end_larger
#+end_span6
#+end_row-fluid
#+end_container-fluid


** Generation of BIP (blind search method)

Shown (Barabasi 96) to be the *same algorithm* as Prim's method for Minimum Spanning Tree (Prim '57)

#+begin_src sh
push(init, OPEN, 0)

while (s = pop(OPEN)); do
   mark(s)                           # mark as visited
   for (edge,t) in expand(s); do     # an edge & successor t (unmarked ones only)

      # Each edge has a value
      if value(edge) is unset ; then
         value(edge) = random()      # assign a random value
      fi

      push(t, OPEN, value(edge))     # insert
   done
done
#+end_src

#+begin_larger
#+begin_center
+ *IMPORTANT:* The random value is *fixed/memoised* on the edge (*never reassigned*)
#+end_center
#+end_larger

** The */embankment effect/* of fixed random edge value

#+begin_container-fluid
#+begin_row-fluid
#+begin_span5
[[png:percolation/embankment]]
#+end_span5
#+begin_span7
#+begin_larger
+ */Embankment/ : A region surrounded by high-valued edges preventing the invasion*

+ */Fixation/ of random values maintains the fractal structure*

+ */BIP != Random heuristics/ (reassigns a new value = break the embankment)*
#+end_larger
#+end_span7
#+end_row-fluid
#+end_container-fluid

** BIP avoids the pathological behavior

[[png:model/bip1]]

** BIP avoids the pathological behavior

[[png:model/bip1-1]]

** BIP avoids the pathological behavior

[[png:model/bip2]]

** BIP avoids the pathological behavior

[[png:model/bip2-1]]

* Evaluation


#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[png:icaps17-results2]]
#+end_span6
#+begin_span6
+ *hb* : *intra-plateau* (by [h, BIP, *])
+ *hB* : *inter-plateau* (by *alt* ([BIP], [h,*]))
+ *hbB* : *both* (by *alt* ([BIP], [h,BIP,*]) )
+ *hdD* : *RandomDepth + Type GBFS*
+ _/Inter/intra orthogonality/_ was observed again
+ vs hdD (depth-based diversifications): competitive results
  + Improvements in *different domains*
  + hdD diversifies wrto *depth*, hbB diversifies wrto *width*
#+end_span6
#+end_row-fluid
#+end_container-fluid

** Blind search characteristics: reduces the search width

Matches our description on pathological cases

　

[[png:percolation/width-reduction]]

** VS. State-of-the-Art


#+begin_container-fluid
#+begin_row-fluid
#+begin_span7
[[png:icaps17-results3]]
#+end_span7
#+begin_span5
+ db^2 DB : Alternates D,B for inter-plateau ; d,b for intra-plateau
+ Because *depth (d,D)* and *width (b,B)* has the different effects
+ Effects mostly combine and improved LAMA
#+end_span5
#+end_row-fluid
#+end_container-fluid

* Extra Discussion: BWFS and GBFS-W in (Lipovetzky AAAI17)

Results obtained from (Lipovetzky AAAI17)

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
#+begin_smaller
| / |       | <         |           | >         | <        |          | >        |
|   |       | <c>       | <c>       | <c>       | <c>      | <c>      | <c>      |
|   |       | GBFS      | GBFS-W    | BFWS      | GBFS     | GBFS-W   | BFWS     |
|   |       | (h^{add}) | (h^{add}) | (h^{add}) | (h^{ff}) | (h^{ff}) | (h^{ff}) |
|---+-------+-----------+-----------+-----------+----------+----------+----------|
|   | barm  | 0         | 0         | */16/*    | 0        | 0        | */10/*   |
|   | caved | 5         | *6*       | *6*       | 6        | 6        | 5        |
|   | child | 0         | 0         | 0         | 0        | 0        | 0        |
|   | cityc | 0         | *6*       | *6*       | 0        | *4*      | *5*      |
|   | floor | 2         | 2         | 2         | 2        | 2        | 2        |
|   | GED   | 0         | *10*      | *16*      | 16       | 13       | */18/*   |
|   | hikin | 8         | 7         | 8         | 2        | *7*      | *9*      |
|   | maint | 16        | 16        | 16        | 11       | _/16/_   | 11       |
|   | opens | 0         | 0         | 0         | 5        | 0        | 5        |
|   | park  | 0         | 0         | 0         | 0        | 0        | 0        |
|   | tetri | 1         | _/9/_     | 3         | 1        | _/9/_    | 1        |
|   | thoug | 13        | 9         | */20/*    | 12       | 11       | */18/*   |
|   | trans | 2         | *5*       | *6*       | 0        | 0        | 0        |
|   | visit | 0         | _/8/_     | 1         | 0        | *20*     | *20*     |
#+end_smaller
#+end_span6
#+begin_span6

+ _/GBFS-W is intra-plateau/_
+ */BFWS is inter-plateau [w,h]/*
+ Improvements in different domains
  + Effects are (mostly) orthogonal
+ *Effects are expected to combine with both enabled.*
+ */Benefit of understanding the diversification !!/*
#+end_span6
#+end_row-fluid
#+end_container-fluid

Difference between BIP and IW : *IW assumes propositional states*, BIP does not

* Conclusion

#+begin_larger
+ *Two modes of diversification* --- previous methods are inter-only / mixture of two, no cleanly separated evaluation
  + */Take-home message/: Whenever you have a diversification method*, _/use it for both modes !!/_
+ *Fractal-based BIP diversification for reducing the search width*
  + */Take-home message/:* _/Fractals have a potential !!/_
  + 
    #+begin_smaller
    Future work: More fractals as search algorithms !
    + DLA (Diffusion Limited Aggregation)
    + BA (Ballistic Aggregation)
    + CCA (Cluster-Cluster Aggregation)
    #+end_smaller
#+end_larger

#+begin_center
#+begin_larger
+ Thank you for listening!
#+end_larger
#+end_center
